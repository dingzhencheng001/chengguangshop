<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="my.fast.admin.app.mapper.AppMemberAccountChangeMapper">
  <resultMap id="BaseResultMap" type="my.fast.admin.app.entity.AppMemberAccountChange">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="account_id" jdbcType="BIGINT" property="accountId" />
    <result column="member_id" jdbcType="BIGINT" property="memberId" />
    <result column="currency_type" jdbcType="INTEGER" property="currencyType" />
    <result column="opera_type" jdbcType="INTEGER" property="operaType" />
    <result column="pre_opera_mount" jdbcType="DECIMAL" property="preOperaMount" />
    <result column="opera_mount" jdbcType="DECIMAL" property="operaMount" />
    <result column="total_mount" jdbcType="DECIMAL" property="totalMount" />
    <result column="create_by" jdbcType="VARCHAR" property="createBy" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_by" jdbcType="VARCHAR" property="updateBy" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, account_id, member_id, currency_type, opera_type, pre_opera_mount, opera_mount, 
    total_mount, create_by, create_time, update_by, update_time
  </sql>
  <select id="selectByExample" parameterType="my.fast.admin.app.entity.AppMemberAccountChangeExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from app_member_account_change
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from app_member_account_change
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from app_member_account_change
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="my.fast.admin.app.entity.AppMemberAccountChangeExample">
    delete from app_member_account_change
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="my.fast.admin.app.entity.AppMemberAccountChange">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into app_member_account_change (account_id, member_id, currency_type, 
      opera_type, pre_opera_mount, opera_mount, 
      total_mount, create_by, create_time, 
      update_by, update_time)
    values (#{accountId,jdbcType=BIGINT}, #{memberId,jdbcType=BIGINT}, #{currencyType,jdbcType=INTEGER}, 
      #{operaType,jdbcType=INTEGER}, #{preOperaMount,jdbcType=DECIMAL}, #{operaMount,jdbcType=DECIMAL}, 
      #{totalMount,jdbcType=DECIMAL}, #{createBy,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateBy,jdbcType=VARCHAR}, #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="my.fast.admin.app.entity.AppMemberAccountChange">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into app_member_account_change
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="accountId != null">
        account_id,
      </if>
      <if test="memberId != null">
        member_id,
      </if>
      <if test="currencyType != null">
        currency_type,
      </if>
      <if test="operaType != null">
        opera_type,
      </if>
      <if test="preOperaMount != null">
        pre_opera_mount,
      </if>
      <if test="operaMount != null">
        opera_mount,
      </if>
      <if test="totalMount != null">
        total_mount,
      </if>
      <if test="createBy != null">
        create_by,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateBy != null">
        update_by,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="accountId != null">
        #{accountId,jdbcType=BIGINT},
      </if>
      <if test="memberId != null">
        #{memberId,jdbcType=BIGINT},
      </if>
      <if test="currencyType != null">
        #{currencyType,jdbcType=INTEGER},
      </if>
      <if test="operaType != null">
        #{operaType,jdbcType=INTEGER},
      </if>
      <if test="preOperaMount != null">
        #{preOperaMount,jdbcType=DECIMAL},
      </if>
      <if test="operaMount != null">
        #{operaMount,jdbcType=DECIMAL},
      </if>
      <if test="totalMount != null">
        #{totalMount,jdbcType=DECIMAL},
      </if>
      <if test="createBy != null">
        #{createBy,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateBy != null">
        #{updateBy,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="my.fast.admin.app.entity.AppMemberAccountChangeExample" resultType="java.lang.Long">
    select count(*) from app_member_account_change
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update app_member_account_change
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.accountId != null">
        account_id = #{record.accountId,jdbcType=BIGINT},
      </if>
      <if test="record.memberId != null">
        member_id = #{record.memberId,jdbcType=BIGINT},
      </if>
      <if test="record.currencyType != null">
        currency_type = #{record.currencyType,jdbcType=INTEGER},
      </if>
      <if test="record.operaType != null">
        opera_type = #{record.operaType,jdbcType=INTEGER},
      </if>
      <if test="record.preOperaMount != null">
        pre_opera_mount = #{record.preOperaMount,jdbcType=DECIMAL},
      </if>
      <if test="record.operaMount != null">
        opera_mount = #{record.operaMount,jdbcType=DECIMAL},
      </if>
      <if test="record.totalMount != null">
        total_mount = #{record.totalMount,jdbcType=DECIMAL},
      </if>
      <if test="record.createBy != null">
        create_by = #{record.createBy,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateBy != null">
        update_by = #{record.updateBy,jdbcType=VARCHAR},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update app_member_account_change
    set id = #{record.id,jdbcType=BIGINT},
      account_id = #{record.accountId,jdbcType=BIGINT},
      member_id = #{record.memberId,jdbcType=BIGINT},
      currency_type = #{record.currencyType,jdbcType=INTEGER},
      opera_type = #{record.operaType,jdbcType=INTEGER},
      pre_opera_mount = #{record.preOperaMount,jdbcType=DECIMAL},
      opera_mount = #{record.operaMount,jdbcType=DECIMAL},
      total_mount = #{record.totalMount,jdbcType=DECIMAL},
      create_by = #{record.createBy,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_by = #{record.updateBy,jdbcType=VARCHAR},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="my.fast.admin.app.entity.AppMemberAccountChange">
    update app_member_account_change
    <set>
      <if test="accountId != null">
        account_id = #{accountId,jdbcType=BIGINT},
      </if>
      <if test="memberId != null">
        member_id = #{memberId,jdbcType=BIGINT},
      </if>
      <if test="currencyType != null">
        currency_type = #{currencyType,jdbcType=INTEGER},
      </if>
      <if test="operaType != null">
        opera_type = #{operaType,jdbcType=INTEGER},
      </if>
      <if test="preOperaMount != null">
        pre_opera_mount = #{preOperaMount,jdbcType=DECIMAL},
      </if>
      <if test="operaMount != null">
        opera_mount = #{operaMount,jdbcType=DECIMAL},
      </if>
      <if test="totalMount != null">
        total_mount = #{totalMount,jdbcType=DECIMAL},
      </if>
      <if test="createBy != null">
        create_by = #{createBy,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateBy != null">
        update_by = #{updateBy,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="my.fast.admin.app.entity.AppMemberAccountChange">
    update app_member_account_change
    set account_id = #{accountId,jdbcType=BIGINT},
      member_id = #{memberId,jdbcType=BIGINT},
      currency_type = #{currencyType,jdbcType=INTEGER},
      opera_type = #{operaType,jdbcType=INTEGER},
      pre_opera_mount = #{preOperaMount,jdbcType=DECIMAL},
      opera_mount = #{operaMount,jdbcType=DECIMAL},
      total_mount = #{totalMount,jdbcType=DECIMAL},
      create_by = #{createBy,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_by = #{updateBy,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>